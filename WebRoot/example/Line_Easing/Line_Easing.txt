Line_Easing

var easingFuncs = {\n    linear: function (k) {\n        return k;\n    },\n    quadraticIn: function (k) {\n        return k * k;\n    },\n    quadraticOut: function (k) {\n        return k * (2 - k);\n    },\n    quadraticInOut: function (k) {\n        if ((k *= 2) < 1) { return 0.5 * k * k; }\n        return -0.5 * (--k * (k - 2) - 1);\n    },\n    cubicIn: function (k) {\n        return k * k * k;\n    },\n    cubicOut: function (k) {\n        return --k * k * k + 1;\n    },\n    cubicInOut: function (k) {\n        if ((k *= 2) < 1) { return 0.5 * k * k * k; }\n        return 0.5 * ((k -= 2) * k * k + 2);\n    },\n    quarticIn: function (k) {\n        return k * k * k * k;\n    },\n    quarticOut: function (k) {\n        return 1 - (--k * k * k * k);\n    },\n    quarticInOut: function (k) {\n        if ((k *= 2) < 1) { return 0.5 * k * k * k * k; }\n        return -0.5 * ((k -= 2) * k * k * k - 2);\n    },\n    quinticIn: function (k) {\n        return k * k * k * k * k;\n    },\n    quinticOut: function (k) {\n        return --k * k * k * k * k + 1;\n    },\n    quinticInOut: function (k) {\n        if ((k *= 2) < 1) { return 0.5 * k * k * k * k * k; }\n        return 0.5 * ((k -= 2) * k * k * k * k + 2);\n    },\n    sinusoidalIn: function (k) {\n        return 1 - Math.cos(k * Math.PI / 2);\n    },\n    sinusoidalOut: function (k) {\n        return Math.sin(k * Math.PI / 2);\n    },\n    sinusoidalInOut: function (k) {\n        return 0.5 * (1 - Math.cos(Math.PI * k));\n    },\n    exponentialIn: function (k) {\n        return k === 0 ? 0 : Math.pow(1024, k - 1);\n    },\n    exponentialOut: function (k) {\n        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n    },\n    exponentialInOut: function (k) {\n        if (k === 0) {\n            return 0;\n        }\n        if (k === 1) {\n            return 1;\n        }\n        if ((k *= 2) < 1) {\n            return 0.5 * Math.pow(1024, k - 1);\n        }\n        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n    },\n    circularIn: function (k) {\n        return 1 - Math.sqrt(1 - k * k);\n    },\n    circularOut: function (k) {\n        return Math.sqrt(1 - (--k * k));\n    },\n    circularInOut: function (k) {\n        if ((k *= 2) < 1) { return -0.5 * (Math.sqrt(1 - k * k) - 1); }\n        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n    },\n    elasticIn: function (k) {\n        var s;\n        var a = 0.1;\n        var p = 0.4;\n        if (k === 0) { return 0; }\n        if (k === 1) { return 1; }\n        if (!a || a < 1) { a = 1; s = p / 4; }\n        else { s = p * Math.asin(1 / a) / (2 * Math.PI); }\n        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n    },\n    elasticOut: function (k) {\n        var s;\n        var a = 0.1;\n        var p = 0.4;\n        if (k === 0) { return 0; }\n        if (k === 1) { return 1; }\n        if (!a || a < 1) { a = 1; s = p / 4; }\n        else { s = p * Math.asin(1 / a) / (2 * Math.PI); }\n        return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n    },\n    elasticInOut: function (k) {\n        var s;\n        var a = 0.1;\n        var p = 0.4;\n        if (k === 0) { return 0; }\n        if (k === 1) { return 1; }\n        if (!a || a < 1) { a = 1; s = p / 4; }\n        else { s = p * Math.asin(1 / a) / (2 * Math.PI); }\n        if ((k *= 2) < 1) {\n            return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n        }\n        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n    },\n\n    // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n    backIn: function (k) {\n        var s = 1.70158;\n        return k * k * ((s + 1) * k - s);\n    },\n    backOut: function (k) {\n        var s = 1.70158;\n        return --k * k * ((s + 1) * k + s) + 1;\n    },\n    backInOut: function (k) {\n        var s = 1.70158 * 1.525;\n        if ((k *= 2) < 1) { return 0.5 * (k * k * ((s + 1) * k - s)); }\n        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n    },\n\n    // 创建弹跳效果\n    bounceIn: function (k) {\n        return 1 - easingFuncs.bounceOut(1 - k);\n    },\n    bounceOut: function (k) {\n        if (k < (1 / 2.75)) { return 7.5625 * k * k; }\n        else if (k < (2 / 2.75)) { return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75; }\n        else if (k < (2.5 / 2.75)) { return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375; }\n        else { return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375; }\n    },\n    bounceInOut: function (k) {\n        if (k < 0.5) { return easingFuncs.bounceIn(k * 2) * 0.5; }\n        return easingFuncs.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n    }\n};\n\nvar N_POINT = 30;\n\nvar grids = [];\nvar xAxes = [];\nvar yAxes = [];\nvar series = [];\nvar titles = [];\nvar count = 0;\necharts.util.each(easingFuncs, function (easingFunc, name) {\n    var data = [];\n    for (var i = 0; i <= N_POINT; i++) {\n        var x = i / N_POINT;\n        var y = easingFunc(x);\n        data.push([x, y]);\n    }\n    grids.push({\n        show: true,\n        borderWidth: 0,\n        backgroundColor: \'#fff\',\n        shadowColor: \'rgba(0, 0, 0, 0.3)\',\n        shadowBlur: 2\n    });\n    xAxes.push({\n        type: \'value\',\n        show: false,\n        min: 0,\n        max: 1,\n        gridIndex: count\n    });\n    yAxes.push({\n        type: \'value\',\n        show: false,\n        min: -0.4,\n        max: 1.4,\n        gridIndex: count\n    });\n    series.push({\n        name: name,\n        type: \'line\',\n        xAxisIndex: count,\n        yAxisIndex: count,\n        data: data,\n        showSymbol: false,\n        animationEasing: name,\n        animationDuration: 1000\n    });\n    titles.push({\n        textAlign: \'center\',\n        text: name,\n        textStyle: {\n            fontSize: 12,\n            fontWeight: \'normal\'\n        }\n    });\n    count++;\n});\n\nvar rowNumber = Math.ceil(Math.sqrt(count));\necharts.util.each(grids, function (grid, idx) {\n    grid.left = ((idx % rowNumber) / rowNumber * 100 + 0.5) + \'%\';\n    grid.top = (Math.floor(idx / rowNumber) / rowNumber * 100 + 0.5) + \'%\';\n    grid.width = (1 / rowNumber * 100 - 1) + \'%\';\n    grid.height = (1 / rowNumber * 100 - 1) + \'%\';\n\n    titles[idx].left = parseFloat(grid.left) + parseFloat(grid.width) / 2 + \'%\';\n    titles[idx].top = parseFloat(grid.top) + \'%\';\n});\noption = {\n    title: titles.concat([{\n        text: \'Different Easing Functions\',\n        top: \'bottom\',\n        left: \'center\'\n    }]),\n    grid: grids,\n    xAxis: xAxes,\n    yAxis: yAxes,\n    series: series\n};\n
